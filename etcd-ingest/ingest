#! /bin/bash

# Ingest from etcd 2.x classic, which used /etc/default/etcd as the
# configuration file and /var/lib/etcd/ as the data directory.

# XXX bundle basename?

echo "Attempting to ingest etcd config and data to snap..."

# We only support ingestion as root
if [ $EUID -ne 0 ]; then
  echo "Please try again as root, perhaps 'sudo etcd.ingest' ?"
  exit 1
fi

CONF_DIR=$SNAP_COMMON
DATA_DIR=/var/snap/$SNAP_NAME/current
TARGET_CONF=$CONF_DIR/etcd.conf
SOURCE_CONF=/etc/default/etcd

# See if there is already a snap configuration file
if [ -e $TARGET_CONF ]; then
  # The desired configuration file is already in place
  echo "Configuration already exists at $TARGET_CONF."
  echo "Will not overwrite that. Exiting without ingestion."
  exit 1
fi

# See if a classic etcd configuration exists
if [ -e $SOURCE_CONF ]; then
  echo "Copying etcd configuration from $SOURCE_CONF"
  . $SOURCE_CONF
else
  echo "No etcd configuration found at $SOURCE_CONF"
  exit 1
fi

# We don't handle separated WAL storage
if [ ! -n $ETCD_WAL_DIR ]; then
  echo "Explicit WAL directory set as $ETCD_WAL_DIR"
  echo
  echo "Please manually shift data to $DATA_DIR and"
  echo "configuration to $TARGET_CONF then switch to"
  echo "a release track of this snap to run etcd."
  exit 1
fi

# Make sure that the old etcd is not running
service etcd stop

# Establish the member name, which defaults to hostname or 'default'
ETCD_NAME="${ETCD_NAME:=$(hostname)}"
ETCD_NAME="${ETCD_NAME:=default}"

# And with it the data directory
SOURCE_DATA_DIR="${ETCD_DATA_DIR:=/var/lib/etcd/default}"
TARGET_DATA_DIR=$DATA_DIR/$ETCD_NAME.etcd

# Make sure that the target data directory does not yet exist
if [ -e $TARGET_DATA_DIR ]; then
  echo "$TARGET_DATA_DIR already exists, not willing to overwrite it."
  exit 1
fi

# Verify that the source data directory exists
if [ ! -e $SOURCE_DATA_DIR ]; then
  echo "$SOURCE_DATA_DIR does not exist, unable to ingest data."
  exit 1
fi

# Copy the data directory into place
cp -a $SOURCE_DATA_DIR $TARGET_DATA_DIR
chown -R root.root $TARGET_DATA_DIR

# Write the new config file template
cat <<EOT > $TARGET_CONF.pre
# etcd config generated by snap ingestion

ETCD_NAME="$ETCD_NAME"
ETCD_DATA_DIR="$TARGET_DATA_DIR"
EOT

# Add any etcd configuration elements which had been set
if [ ! -z $ETCD_SNAPSHOT_COUNT ]; then
  echo "ETCD_SNAPSHOT_COUNT=\"$ETCD_SNAPSHOT_COUNT\"" >> $TARGET_CONF.pre
fi

if [ ! -z $ETCD_HEARTBEAT_INTERVAL ]; then
  echo "ETCD_HEARTBEAT_INTERVAL=\"$ETCD_HEARTBEAT_INTERVAL\"" >> $TARGET_CONF.pre
fi

if [ ! -z $ETCD_ELECTION_TIMEOUT ]; then
  echo "ETCD_ELECTION_TIMEOUT=\"$ETCD_ELECTION_TIMEOUT\"" >> $TARGET_CONF.pre
fi

if [ ! -z $ETCD_LISTEN_PEER_URLS ]; then
  echo "ETCD_LISTEN_PEER_URLS=\"$ETCD_LISTEN_PEER_URLS\"" >> $TARGET_CONF.pre
fi

if [ ! -z $ETCD_LISTEN_CLIENT_URLS ]; then
  echo "ETCD_LISTEN_CLIENT_URLS=\"$ETCD_LISTEN_CLIENT_URLS\"" >> $TARGET_CONF.pre
fi

if [ ! -z $ETCD_MAX_SNAPSHOTS ]; then
  echo "ETCD_MAX_SNAPSHOTS=\"$ETCD_MAX_SNAPSHOTS\"" >> $TARGET_CONF.pre
fi

if [ ! -z $ETCD_MAX_WALS ]; then
  echo "ETCD_MAX_WALS=\"$ETCD_MAX_WALS\"" >> $TARGET_CONF.pre
fi

if [ ! -z $ETCD_CORS ]; then
  echo "ETCD_CORS=\"$ETCD_CORS\"" >> $TARGET_CONF.pre
fi

if [ ! -z $ETCD_ADVERTISE_CLIENT_URLS ]; then
  echo "ETCD_ADVERTISE_CLIENT_URLS=\"$ETCD_ADVERTISE_CLIENT_URLS\"" >> $TARGET_CONF.pre
fi

if [ ! -z $ETCD_DISCOVERY ]; then
  echo "ETCD_DISCOVERY=\"$ETCD_DISCOVERY\"" >> $TARGET_CONF.pre
fi

if [ ! -z $ETCD_DISCOVERY_SRV ]; then
  echo "ETCD_DISCOVERY_SRV=\"$ETCD_DISCOVERY_SRV\"" >> $TARGET_CONF.pre
fi

if [ ! -z $ETCD_DISCOVERY_FALLBACK ]; then
  echo "ETCD_DISCOVERY_FALLBACK=\"$ETCD_DISCOVERY_FALLBACK\"" >> $TARGET_CONF.pre
fi

if [ ! -z $ETCD_DISCOVERY_PROXY ]; then
  echo "ETCD_DISCOVERY_PROXY=\"$ETCD_DISCOVERY_PROXY\"" >> $TARGET_CONF.pre
fi

if [ ! -z $ETCD_PROXY ]; then
  echo "ETCD_PROXY=\"$ETCD_PROXY\"" >> $TARGET_CONF.pre
fi

if [ ! -z $ETCD_PROXY_FAILURE_WAIT ]; then
  echo "ETCD_PROXY_FAILURE_WAIT=\"$ETCD_PROXY_FAILURE_WAIT\"" >> $TARGET_CONF.pre
fi

if [ ! -z $ETCD_PROXY_REFRESH_INTERVAL ]; then
  echo "ETCD_PROXY_REFRESH_INTERVAL=\"$ETCD_PROXY_REFRESH_INTERVAL\"" >> $TARGET_CONF.pre
fi

if [ ! -z $ETCD_PROXY_DIAL_TIMEOUT ]; then
  echo "ETCD_PROXY_DIAL_TIMEOUT=\"$ETCD_PROXY_DIAL_TIMEOUT\"" >> $TARGET_CONF.pre
fi

if [ ! -z $ETCD_PROXY_WRITE_TIMEOUT ]; then
  echo "ETCD_PROXY_WRITE_TIMEOUT=\"$ETCD_PROXY_WRITE_TIMEOUT\"" >> $TARGET_CONF.pre
fi

if [ ! -z $ETCD_PROXY_READ_TIMEOUT ]; then
  echo "ETCD_PROXY_READ_TIMEOUT=\"$ETCD_PROXY_READ_TIMEOUT\"" >> $TARGET_CONF.pre
fi

# handle deprecated client ca file config
if [ ! -z $ETCD_CA_FILE ]; then
  if [ ! -z $ETCD_TRUSTED_CA_FILE ]; then
    echo "Both ETCD_CA_FILE and ETCD_TRUSTED_CA_FILE are set."
    echo "Please use ETCD_TRUSTED_CA_FILE and set ETCD_CLIENT_CERT_AUTH=true"
    echo "before trying again."
    exit 1
  fi
  if [ ! -e $ETCD_CA_FILE ]; then
    echo "ETCD_CA_FILE $ETCD_CA_FILE not found."
    exit 1
  fi
  ETCD_TRUSTED_CA_FILE=$ETCD_CA_FILE
  ETCD_CLIENT_CERT_AUTH=true
fi

if [ ! -z $ETCD_CERT_FILE ]; then
  if [ ! -e $ETCD_CERT_FILE ]; then
    echo "Non-existent cert file $ETCD_CERT_FILE"
    echo "Abandoning ingest."
    exit 1
  fi
  CERT_FILE=$(basename $ETCD_CERT_FILE)
  cp $ETCD_CERT_FILE $CONF_DIR/$CERT_FILE
  chmod 644 $CONF_DIR/$CERT_FILE
  echo "ETCD_CERT_FILE=\"$CONF_DIR/$CERT_FILE\"" >> $TARGET_CONF.pre
fi

if [ ! -z $ETCD_KEY_FILE ]; then
  if [ ! -e $ETCD_KEY_FILE ]; then
    echo "Non-existent key file $ETCD_KEY_FILE"
    echo "Abandoning ingest."
    exit 1
  fi
  KEY_FILE=$(basename $ETCD_KEY_FILE)
  cp $ETCD_KEY_FILE $CONF_DIR/$KEY_FILE
  chmod 600 $CONF_DIR/$KEY_FILE
  echo "ETCD_KEY_FILE=\"$CONF_DIR/$KEY_FILE\"" >> $TARGET_CONF.pre
fi

if [ ! -z $ETCD_CLIENT_CERT_AUTH ]; then
  echo "ETCD_CLIENT_CERT_AUTH=$ETCD_CLIENT_CERT_AUTH" >> $TARGET_CONF.pre
fi

if [ ! -z $ETCD_TRUSTED_CA_FILE ]; then
  if [ ! -e $ETCD_TRUSTED_CA_FILE ]; then
    echo "Non-existent CA file $ETCD_TRUSTED_CA_FILE"
    echo "Abandoning ingest."
    exit 1
  fi
  TRUSTED_CA_FILE=$(basename $ETCD_TRUSTED_CA_FILE)
  cp $ETCD_TRUSTED_CA_FILE $CONF_DIR/$TRUSTED_CA_FILE
  chmod 644 $CONF_DIR/$TRUSTED_CA_FILE
  echo "ETCD_TRUSTED_CA_FILE=\"$CONF_DIR/$TRUSTED_CA_FILE\"" >> $TARGET_CONF.pre
fi

# handle deprecated peer ca file config
if [ ! -z $ETCD_PEER_CA_FILE ]; then
  if [ ! -z $ETCD_PEER_TRUSTED_CA_FILE ]; then
    echo "Both ETCD_PEER_CA_FILE and ETCD_PEER_TRUSTED_CA_FILE are set."
    echo "Use ETCD_PEER_TRUSTED_CA_FILE and set ETCD_PEER_CLIENT_CERT_AUTH=true"
    echo "before trying again."
    exit 1
  fi
  if [ ! -e $ETCD_PEER_CA_FILE ]; then
    echo "ETCD_PEER_CA_FILE $ETCD_PEER_CA_FILE not found."
    exit 1
  fi
  ETCD_PEER_TRUSTED_CA_FILE=$ETCD_PEER_CA_FILE
  ETCD_PEER_CLIENT_CERT_AUTH=true
fi

if [ ! -z $ETCD_PEER_CERT_FILE ]; then
  if [ ! -e $ETCD_PEER_CERT_FILE ]; then
    echo "Non-existent peer cert file $ETCD_PEER_CERT_FILE"
    echo "Abandoning ingest."
    exit 1
  fi
  PEER_CERT_FILE=$(basename $ETCD_PEER_CERT_FILE)
  cp $ETCD_PEER_CERT_FILE $CONF_DIR/$PEER_CERT_FILE
  chmod 644 $CONF_DIR/$PEER_CERT_FILE
  echo "ETCD_PEER_CERT_FILE=\"$CONF_DIR/$PEER_CERT_FILE\"" >> $TARGET_CONF.pre
fi

if [ ! -z $ETCD_PEER_KEY_FILE ]; then
  if [ ! -e $ETCD_PEER_KEY_FILE ]; then
    echo "Non-existent key file $ETCD_PEER_KEY_FILE"
    echo "Abandoning ingest."
    exit 1
  fi
  PEER_KEY_FILE=$(basename $ETCD_PEER_KEY_FILE)
  cp $ETCD_PEER_KEY_FILE $CONF_DIR/$PEER_KEY_FILE
  chmod 600 $CONF_DIR/$PEER_KEY_FILE
  echo "ETCD_PEER_KEY_FILE=\"$CONF_DIR/$PEER_KEY_FILE\"" >> $TARGET_CONF.pre
fi

if [ ! -z $ETCD_PEER_CLIENT_CERT_AUTH ]; then
  echo "ETCD_PEER_CLIENT_CERT_AUTH=$ETCD_PEER_CLIENT_CERT_AUTH" >> $TARGET_CONF.pre
fi

if [ ! -z $ETCD_PEER_TRUSTED_CA_FILE ]; then
  if [ ! -e $ETCD_PEER_TRUSTED_CA_FILE ]; then
    echo "Non-existent CA file $ETCD_PEER_TRUSTED_CA_FILE"
    echo "Abandoning ingest."
    exit 1
  fi
  PEER_TRUSTED_CA_FILE=$(basename $ETCD_PEER_TRUSTED_CA_FILE)
  cp $ETCD_PEER_TRUSTED_CA_FILE $CONF_DIR/$PEER_TRUSTED_CA_FILE
  chmod 644 $CONF_DIR/$PEER_TRUSTED_CA_FILE
  echo "ETCD_PEER_TRUSTED_CA_FILE=\"$CONF_DIR/$PEER_TRUSTED_CA_FILE\"" >> $TARGET_CONF.pre
fi

if [ ! -z $ETCD_DEBUG ]; then
  echo "ETCD_DEBUG=$ETCD_DEBUG" >> $TARGET_CONF.pre
fi

if [ ! -z $ETCD_LOG_PACKAGE_LEVELS ]; then
  echo "ETCD_LOG_PACKAGE_LEVELS=\"$ETCD_LOG_PACKAGE_LEVELS\"" >> $TARGET_CONF.pre
fi

if [ ! -z $DAEMON_ARGS ]; then
  echo "DAEMON_ARGS=$DAEMON_ARGS" >> $TARGET_CONF.pre
fi

# Move the config file into place
mv $TARGET_CONF.pre $TARGET_CONF

echo "Ingest complete:"
echo
echo " config: $TARGET_CONF"
echo "   data: $TARGET_DATA_DIR"
echo
echo "Next, 'sudo snap refresh etcd --channel=2.3/stable' will fetch and launch etcd 2.3"

